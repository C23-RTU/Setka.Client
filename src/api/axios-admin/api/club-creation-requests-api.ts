/* tslint:disable */
/* eslint-disable */
/**
 * My Title
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { ClubCreationRequestDetailsDTO } from '../models';
// @ts-ignore
import type { ProblemDetails } from '../models';
/**
 * ClubCreationRequestsApi - axios parameter creator
 * @export
 */
export const ClubCreationRequestsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} requestId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clubCreationRequestsAcceptRequestById: async (requestId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'requestId' is not null or undefined
            assertParamExists('clubCreationRequestsAcceptRequestById', 'requestId', requestId)
            const localVarPath = `/clubCreationRequests/acceptById/{requestId}`
                .replace(`{${"requestId"}}`, encodeURIComponent(String(requestId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string | null} [clubName] 
         * @param {string | null} [clubAbout] 
         * @param {File | null} [clubImage] 
         * @param {File | null} [bannerImage] 
         * @param {string | null} [comment] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clubCreationRequestsAdd: async (clubName?: string | null, clubAbout?: string | null, clubImage?: File | null, bannerImage?: File | null, comment?: string | null, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/clubCreationRequests`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (clubName !== undefined) { 
                localVarFormParams.append('ClubName', clubName as any);
            }
    
            if (clubAbout !== undefined) { 
                localVarFormParams.append('ClubAbout', clubAbout as any);
            }
    
            if (clubImage !== undefined) { 
                localVarFormParams.append('ClubImage', clubImage as any);
            }
    
            if (bannerImage !== undefined) { 
                localVarFormParams.append('BannerImage', bannerImage as any);
            }
    
            if (comment !== undefined) { 
                localVarFormParams.append('Comment', comment as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} requestId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clubCreationRequestsDeclineRequestById: async (requestId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'requestId' is not null or undefined
            assertParamExists('clubCreationRequestsDeclineRequestById', 'requestId', requestId)
            const localVarPath = `/clubCreationRequests/declineById/{requestId}`
                .replace(`{${"requestId"}}`, encodeURIComponent(String(requestId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clubCreationRequestsGetActiveRequests: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/clubCreationRequests`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} requestId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clubCreationRequestsGetById: async (requestId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'requestId' is not null or undefined
            assertParamExists('clubCreationRequestsGetById', 'requestId', requestId)
            const localVarPath = `/clubCreationRequests/getById/{requestId}`
                .replace(`{${"requestId"}}`, encodeURIComponent(String(requestId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ClubCreationRequestsApi - functional programming interface
 * @export
 */
export const ClubCreationRequestsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ClubCreationRequestsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} requestId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async clubCreationRequestsAcceptRequestById(requestId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.clubCreationRequestsAcceptRequestById(requestId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ClubCreationRequestsApi.clubCreationRequestsAcceptRequestById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string | null} [clubName] 
         * @param {string | null} [clubAbout] 
         * @param {File | null} [clubImage] 
         * @param {File | null} [bannerImage] 
         * @param {string | null} [comment] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async clubCreationRequestsAdd(clubName?: string | null, clubAbout?: string | null, clubImage?: File | null, bannerImage?: File | null, comment?: string | null, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.clubCreationRequestsAdd(clubName, clubAbout, clubImage, bannerImage, comment, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ClubCreationRequestsApi.clubCreationRequestsAdd']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} requestId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async clubCreationRequestsDeclineRequestById(requestId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.clubCreationRequestsDeclineRequestById(requestId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ClubCreationRequestsApi.clubCreationRequestsDeclineRequestById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async clubCreationRequestsGetActiveRequests(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ClubCreationRequestDetailsDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.clubCreationRequestsGetActiveRequests(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ClubCreationRequestsApi.clubCreationRequestsGetActiveRequests']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} requestId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async clubCreationRequestsGetById(requestId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ClubCreationRequestDetailsDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.clubCreationRequestsGetById(requestId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ClubCreationRequestsApi.clubCreationRequestsGetById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ClubCreationRequestsApi - factory interface
 * @export
 */
export const ClubCreationRequestsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ClubCreationRequestsApiFp(configuration)
    return {
        /**
         * 
         * @param {number} requestId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clubCreationRequestsAcceptRequestById(requestId: number, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.clubCreationRequestsAcceptRequestById(requestId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string | null} [clubName] 
         * @param {string | null} [clubAbout] 
         * @param {File | null} [clubImage] 
         * @param {File | null} [bannerImage] 
         * @param {string | null} [comment] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clubCreationRequestsAdd(clubName?: string | null, clubAbout?: string | null, clubImage?: File | null, bannerImage?: File | null, comment?: string | null, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.clubCreationRequestsAdd(clubName, clubAbout, clubImage, bannerImage, comment, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} requestId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clubCreationRequestsDeclineRequestById(requestId: number, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.clubCreationRequestsDeclineRequestById(requestId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clubCreationRequestsGetActiveRequests(options?: RawAxiosRequestConfig): AxiosPromise<Array<ClubCreationRequestDetailsDTO>> {
            return localVarFp.clubCreationRequestsGetActiveRequests(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} requestId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clubCreationRequestsGetById(requestId: number, options?: RawAxiosRequestConfig): AxiosPromise<ClubCreationRequestDetailsDTO> {
            return localVarFp.clubCreationRequestsGetById(requestId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ClubCreationRequestsApi - interface
 * @export
 * @interface ClubCreationRequestsApi
 */
export interface ClubCreationRequestsApiInterface {
    /**
     * 
     * @param {number} requestId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClubCreationRequestsApiInterface
     */
    clubCreationRequestsAcceptRequestById(requestId: number, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {string | null} [clubName] 
     * @param {string | null} [clubAbout] 
     * @param {File | null} [clubImage] 
     * @param {File | null} [bannerImage] 
     * @param {string | null} [comment] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClubCreationRequestsApiInterface
     */
    clubCreationRequestsAdd(clubName?: string | null, clubAbout?: string | null, clubImage?: File | null, bannerImage?: File | null, comment?: string | null, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {number} requestId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClubCreationRequestsApiInterface
     */
    clubCreationRequestsDeclineRequestById(requestId: number, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClubCreationRequestsApiInterface
     */
    clubCreationRequestsGetActiveRequests(options?: RawAxiosRequestConfig): AxiosPromise<Array<ClubCreationRequestDetailsDTO>>;

    /**
     * 
     * @param {number} requestId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClubCreationRequestsApiInterface
     */
    clubCreationRequestsGetById(requestId: number, options?: RawAxiosRequestConfig): AxiosPromise<ClubCreationRequestDetailsDTO>;

}

/**
 * ClubCreationRequestsApi - object-oriented interface
 * @export
 * @class ClubCreationRequestsApi
 * @extends {BaseAPI}
 */
export class ClubCreationRequestsApi extends BaseAPI implements ClubCreationRequestsApiInterface {
    /**
     * 
     * @param {number} requestId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClubCreationRequestsApi
     */
    public clubCreationRequestsAcceptRequestById(requestId: number, options?: RawAxiosRequestConfig) {
        return ClubCreationRequestsApiFp(this.configuration).clubCreationRequestsAcceptRequestById(requestId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string | null} [clubName] 
     * @param {string | null} [clubAbout] 
     * @param {File | null} [clubImage] 
     * @param {File | null} [bannerImage] 
     * @param {string | null} [comment] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClubCreationRequestsApi
     */
    public clubCreationRequestsAdd(clubName?: string | null, clubAbout?: string | null, clubImage?: File | null, bannerImage?: File | null, comment?: string | null, options?: RawAxiosRequestConfig) {
        return ClubCreationRequestsApiFp(this.configuration).clubCreationRequestsAdd(clubName, clubAbout, clubImage, bannerImage, comment, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} requestId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClubCreationRequestsApi
     */
    public clubCreationRequestsDeclineRequestById(requestId: number, options?: RawAxiosRequestConfig) {
        return ClubCreationRequestsApiFp(this.configuration).clubCreationRequestsDeclineRequestById(requestId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClubCreationRequestsApi
     */
    public clubCreationRequestsGetActiveRequests(options?: RawAxiosRequestConfig) {
        return ClubCreationRequestsApiFp(this.configuration).clubCreationRequestsGetActiveRequests(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} requestId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClubCreationRequestsApi
     */
    public clubCreationRequestsGetById(requestId: number, options?: RawAxiosRequestConfig) {
        return ClubCreationRequestsApiFp(this.configuration).clubCreationRequestsGetById(requestId, options).then((request) => request(this.axios, this.basePath));
    }
}

